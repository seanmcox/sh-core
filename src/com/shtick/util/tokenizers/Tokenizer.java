/**
 * 
 */
package com.shtick.util.tokenizers;

import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.util.List;

import com.shtick.util.GenericsResolver;

/**
 * @author sean.cox
 * @param <T> 
 *
 */
public interface Tokenizer<T extends Token<T>> {
	/**
	 * Parses until the end of the stream is encountered.
	 * 
	 * @param in An InputStream providing the data to parse.
	 * @return The TokenTree parsed from the InputStream.
	 * @throws IOException if there is a problem reading from in
	 */
	TokenTree<T> tokenize(InputStream in) throws IOException;

	/**
	 * Parses until the end of the reader is encountered.
	 * 
	 * @param in A Reader providing the characters to parse.
	 * @return The TokenTree parsed from the Reader.
	 * @throws IOException if there is a problem reading from in
	 */
	TokenTree<T> tokenize(Reader in) throws IOException;

	/**
	 * 
	 * @return An array of Strings identifying valid mime types for this TokenTreeCSS.
	 *         This information may be used to support identifying tokenization options whenever
	 *         the user might wish to engage with data in a structured way. This might support
	 *         a feature like syntax highlighting in a generic text editor.
	 *         Generic wildcards can be used. (eg. text/*)
	 */
	String[] getValidMimeTypes();
	
	/**
	 * 
	 * @param c
	 * @return The base class of the tokens generated by this parser.
	 */
	default Class<Token<?>> getTokenClass(){
		List<Class<?>> types=GenericsResolver.getTypeArguments(Tokenizer.class, getClass());
		return (Class<Token<?>>)types.get(0);
	}
}
